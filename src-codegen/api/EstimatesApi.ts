/**
 * Uber API
 * Move your app forward with the Uber API
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class EstimatesApi {

    protected basePath = 'https://api.uber.com/v1';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * The Price Estimates endpoint returns an estimated price range for each product offered at a given location. The price estimate is provided as a formatted string with the full price range and the localized currency symbol.<br><br>The response also includes low and high estimates, and the [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) currency code for situations requiring currency conversion. When surge is active for a particular product, its surge_multiplier will be greater than 1, but the price estimate already factors in this multiplier. 
     * @summary Price Estimates
     * @param startLatitude Latitude component of start location.
     * @param startLongitude Longitude component of start location.
     * @param endLatitude Latitude component of end location.
     * @param endLongitude Longitude component of end location.
     */
    public estimatesPriceGet(startLatitude: number, startLongitude: number, endLatitude: number, endLongitude: number, extraHttpRequestParams?: any): Observable<Array<models.PriceEstimate>> {
        return this.estimatesPriceGetWithHttpInfo(startLatitude, startLongitude, endLatitude, endLongitude, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * The Time Estimates endpoint returns ETAs for all products offered at a given location, with the responses expressed as integers in seconds. We recommend that this endpoint be called every minute to provide the most accurate, up-to-date ETAs.
     * @summary Time Estimates
     * @param startLatitude Latitude component of start location.
     * @param startLongitude Longitude component of start location.
     * @param customerUuid Unique customer identifier to be used for experience customization.
     * @param productId Unique identifier representing a specific product for a given latitude &amp; longitude.
     */
    public estimatesTimeGet(startLatitude: number, startLongitude: number, customerUuid?: string, productId?: string, extraHttpRequestParams?: any): Observable<Array<models.Product>> {
        return this.estimatesTimeGetWithHttpInfo(startLatitude, startLongitude, customerUuid, productId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }


    /**
     * Price Estimates
     * The Price Estimates endpoint returns an estimated price range for each product offered at a given location. The price estimate is provided as a formatted string with the full price range and the localized currency symbol.&lt;br&gt;&lt;br&gt;The response also includes low and high estimates, and the [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) currency code for situations requiring currency conversion. When surge is active for a particular product, its surge_multiplier will be greater than 1, but the price estimate already factors in this multiplier. 
     * @param startLatitude Latitude component of start location.
     * @param startLongitude Longitude component of start location.
     * @param endLatitude Latitude component of end location.
     * @param endLongitude Longitude component of end location.
     */
    public estimatesPriceGetWithHttpInfo(startLatitude: number, startLongitude: number, endLatitude: number, endLongitude: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/estimates/price';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'startLatitude' is not null or undefined
        if (startLatitude === null || startLatitude === undefined) {
            throw new Error('Required parameter startLatitude was null or undefined when calling estimatesPriceGet.');
        }
        // verify required parameter 'startLongitude' is not null or undefined
        if (startLongitude === null || startLongitude === undefined) {
            throw new Error('Required parameter startLongitude was null or undefined when calling estimatesPriceGet.');
        }
        // verify required parameter 'endLatitude' is not null or undefined
        if (endLatitude === null || endLatitude === undefined) {
            throw new Error('Required parameter endLatitude was null or undefined when calling estimatesPriceGet.');
        }
        // verify required parameter 'endLongitude' is not null or undefined
        if (endLongitude === null || endLongitude === undefined) {
            throw new Error('Required parameter endLongitude was null or undefined when calling estimatesPriceGet.');
        }
        if (startLatitude !== undefined) {
            queryParameters.set('start_latitude', <any>startLatitude);
        }

        if (startLongitude !== undefined) {
            queryParameters.set('start_longitude', <any>startLongitude);
        }

        if (endLatitude !== undefined) {
            queryParameters.set('end_latitude', <any>endLatitude);
        }

        if (endLongitude !== undefined) {
            queryParameters.set('end_longitude', <any>endLongitude);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Time Estimates
     * The Time Estimates endpoint returns ETAs for all products offered at a given location, with the responses expressed as integers in seconds. We recommend that this endpoint be called every minute to provide the most accurate, up-to-date ETAs.
     * @param startLatitude Latitude component of start location.
     * @param startLongitude Longitude component of start location.
     * @param customerUuid Unique customer identifier to be used for experience customization.
     * @param productId Unique identifier representing a specific product for a given latitude &amp; longitude.
     */
    public estimatesTimeGetWithHttpInfo(startLatitude: number, startLongitude: number, customerUuid?: string, productId?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/estimates/time';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'startLatitude' is not null or undefined
        if (startLatitude === null || startLatitude === undefined) {
            throw new Error('Required parameter startLatitude was null or undefined when calling estimatesTimeGet.');
        }
        // verify required parameter 'startLongitude' is not null or undefined
        if (startLongitude === null || startLongitude === undefined) {
            throw new Error('Required parameter startLongitude was null or undefined when calling estimatesTimeGet.');
        }
        if (startLatitude !== undefined) {
            queryParameters.set('start_latitude', <any>startLatitude);
        }

        if (startLongitude !== undefined) {
            queryParameters.set('start_longitude', <any>startLongitude);
        }

        if (customerUuid !== undefined) {
            queryParameters.set('customer_uuid', <any>customerUuid);
        }

        if (productId !== undefined) {
            queryParameters.set('product_id', <any>productId);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
